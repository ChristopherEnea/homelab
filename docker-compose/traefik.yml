version: '3'

services:
  reverse-proxy:
    container_name: "traefik"
    # The official v2 Traefik docker image
    image: traefik:latest
    # Enables the web UI and tells Traefik to listen to docker
    command: 
      - "--api.insecure=true" 
      - "--providers.docker"
      - "--entrypoints.websecure.address=:443"
      - "--log.level=DEBUG"
      - "--ping"
      - "--certificatesresolvers.myresolver.acme.dnschallenge=true"
      - "--certificatesresolvers.myresolver.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.myresolver.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      # The HTTP port
      - "80:80"
      - "443:443"
      # The Web UI (enabled by --api.insecure=true)
      # - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      # Create a letsencrypt dir within the folder where the docker-compose file is
      - "/etc/ssl/certs:/letsencrypt"
      # - /etc/traefik:/etc/traefik
    networks:
      - traefik
    restart: unless-stopped
    labels:
      - traefik.http.routers.traefik.rule=Host(`traefik.christopherenea.net`)
      - traefik.http.routers.traefik.tls=true
      - traefik.port=443
      - traefik.http.services.traefik.loadbalancer.server.port=8080
      - traefik.http.routers.traefik.tls.certresolver=myresolver # Uses the Host rule to define which certificate to issue
    environment:
      # CF_API_EMAIL: ${CF_API_EMAIL}
      # CF_API_KEY: ${CF_API_KEY}
      CF_DNS_API_TOKEN: ${CF_DNS_API_TOKEN}
      CF_ZONE_API_TOKEN: ${CF_ZONE_API_TOKEN}

networks:
  traefik:
    name: traefik

# --------
# env vars
# --------
# ACME_EMAIL
# 
# CF_API_EMAIL
# CF_API_KEY
# (pick the two above or two below)
# CF_DNS_API_TOKEN
# CF_ZONE_API_TOKEN